{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":85062,"databundleVersionId":9578279,"sourceType":"competition"}],"dockerImageVersionId":30775,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false},"colab":{"name":"22f3000517-notebook-t32024","provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/22f3000517-notebook-t32024-fff88ab1-a79f-4852-8bd0-71246d04438e.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20241220/auto/storage/goog4_request&X-Goog-Date=20241220T162842Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=9a28021d7e1acb96b8f70f52ad3eb36ed8162df9fbaa8ecc33270f8c141b76f8f15673128bb8ce04ae5f214706c30061ed77cd8c54a37054ec635a0860e3a8de5944ac76f0faa87e8d0ebbe3c0d5a6e81f1842e7a941b109cc3068eeb51f5bcb6060b954c26e3958e47d665cdcd91bc1feec4a320540e0925c74c9e42e61edf1bd5b216f2d527a1115af0f852d28bf1097fdba0ee30d24e4815df3d93784de667e64cd9a3d516533a3d0021083c26f2a1abf78cfda6814284a0de9b1d698dfd1e570c425c1fa27e31f50d4843121e9bfb3b149ad78353a3c4ed1c6f157a50eec5c797c7dde7487ac74c631e960ffa83e541fd2196b676c9789584d6044db20c7","timestamp":1734712136653}]}},"nbformat_minor":0,"nbformat":4,"cells":[{"source":["# IMPORTANT: SOME KAGGLE DATA SOURCES ARE PRIVATE\n","# RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES.\n","import kagglehub\n","kagglehub.login()\n"],"metadata":{"id":"j8rXEd4U5mWN"},"cell_type":"code","outputs":[],"execution_count":null},{"source":["# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,\n","# THEN FEEL FREE TO DELETE THIS CELL.\n","# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n","# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n","# NOTEBOOK.\n","\n","predict_the_success_of_bank_telemarketing_path = kagglehub.competition_download('predict-the-success-of-bank-telemarketing')\n","\n","print('Data source import complete.')\n"],"metadata":{"id":"uqlCWk4W5mWT"},"cell_type":"code","outputs":[],"execution_count":null},{"cell_type":"code","source":["# This Python 3 environment comes with many helpful analytics libraries installed\n","# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n","# For example, here's several helpful packages to load\n","\n","import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","\n","# Input data files are available in the read-only \"../input/\" directory\n","# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","\n","import os\n","for dirname, _, filenames in os.walk('/kaggle/input'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))\n","\n","# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\"\n","# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"],"metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-11-30T17:05:15.436134Z","iopub.execute_input":"2024-11-30T17:05:15.436819Z","iopub.status.idle":"2024-11-30T17:05:15.805129Z","shell.execute_reply.started":"2024-11-30T17:05:15.436782Z","shell.execute_reply":"2024-11-30T17:05:15.80417Z"},"id":"1yvGBsUw5mWU"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["# MLP PROJECT\n","\n","## Name    : M.R.Radha Ruckmani\n","## Roll No : 22f3000517"],"metadata":{"id":"LQ-q_1OB5mWV"}},{"cell_type":"markdown","source":["## Import required Libraries"],"metadata":{"id":"HCINBpB15mWX"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","from sklearn.svm import SVC\n","from sklearn.ensemble import AdaBoostClassifier,RandomForestClassifier,BaggingClassifier,VotingClassifier\n","from xgboost import XGBClassifier\n","from lightgbm import LGBMClassifier\n","from sklearn.dummy import DummyClassifier\n","from sklearn.linear_model import SGDClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.model_selection import train_test_split,GridSearchCV,RandomizedSearchCV\n","from sklearn.preprocessing import StandardScaler,MinMaxScaler,OneHotEncoder,MaxAbsScaler,OrdinalEncoder,LabelEncoder\n","from sklearn.impute import SimpleImputer\n","from sklearn.pipeline import Pipeline\n","from sklearn.compose import ColumnTransformer\n","\n","from sklearn.feature_selection import SelectKBest,mutual_info_classif,RFE,RFECV\n","from sklearn.metrics import accuracy_score, confusion_matrix, confusion_matrix,ConfusionMatrixDisplay,classification_report,f1_score,precision_score"],"metadata":{"execution":{"iopub.status.busy":"2024-11-30T17:05:20.256561Z","iopub.execute_input":"2024-11-30T17:05:20.257051Z","iopub.status.idle":"2024-11-30T17:05:22.618282Z","shell.execute_reply.started":"2024-11-30T17:05:20.257015Z","shell.execute_reply":"2024-11-30T17:05:22.617442Z"},"trusted":true,"id":"-ffHFn4l5mWY"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["import warnings\n","warnings.filterwarnings(\"ignore\")"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T10:17:11.68906Z","iopub.execute_input":"2024-11-30T10:17:11.690108Z","iopub.status.idle":"2024-11-30T10:17:11.694696Z","shell.execute_reply.started":"2024-11-30T10:17:11.690063Z","shell.execute_reply":"2024-11-30T10:17:11.693426Z"},"id":"LjxwkjRn5mWY"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["## Loading the Train and Test Data"],"metadata":{"id":"c0G5eylo5mWZ"}},{"cell_type":"code","source":["df_train=pd.read_csv('/kaggle/input/predict-the-success-of-bank-telemarketing/train.csv')\n","df_test=pd.read_csv('/kaggle/input/predict-the-success-of-bank-telemarketing/test.csv')"],"metadata":{"execution":{"iopub.status.busy":"2024-11-30T17:05:52.043346Z","iopub.execute_input":"2024-11-30T17:05:52.044039Z","iopub.status.idle":"2024-11-30T17:05:52.144841Z","shell.execute_reply.started":"2024-11-30T17:05:52.043999Z","shell.execute_reply":"2024-11-30T17:05:52.143832Z"},"trusted":true,"id":"5uGbuOfH5mWa"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["## EDA and Visualisation\n","### 1.  **Data Structure**"],"metadata":{"id":"67yR11uE5mWa"}},{"cell_type":"code","source":["df_train.info()"],"metadata":{"trusted":true,"id":"rp-r5smY5mWb"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["\n","\n","####    1.1 *Basic information of the dataset*\n","\n","  We can observe the following from the above structure\n","               \n","* There are totally **39211** rows and **16** features (columns)\n","* There are **10** features of **Object Datatype**\n","* There are **6** **integer data type** features\n","* The column **'target'** is the target column\n","* There are null values in 4 columns which are **job,education,contact and                   poutcome**\n","* The target column shows that the clients who have subscribed and not subscribed for the    term deposit\n","* Its a Binary Classification problem\n","* We can observe that out of **39211** total clients, **33384**(around 85%) have\n","**not  subscribed** for the term deposit. Its highly imbalanced dataset"],"metadata":{"id":"JkBRWARG5mWb"}},{"cell_type":"code","source":["df_train.head()"],"metadata":{"trusted":true,"id":"0JFrENJa5mWb"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["df_test.head()"],"metadata":{"trusted":true,"id":"iroV_sun5mWc"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["df_train.shape,df_test.shape"],"metadata":{"trusted":true,"id":"BOpF6Mx05mWc"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["cat_col = df_train.select_dtypes(include = \"object\").columns\n","num_col   = df_train.select_dtypes(include = \"int\").columns\n","print(\"The number of categorical columns is :\", len(cat_col))\n","print(\"The number of Numerical columns is :\", len(num_col))"],"metadata":{"trusted":true,"id":"UaZwOYHy5mWc"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["df_train['target'].value_counts()"],"metadata":{"trusted":true,"id":"GhvkgLRu5mWc"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### 1.2 Null value checking"],"metadata":{"id":"WCKOihG95mWd"}},{"cell_type":"code","source":["print(\"The null values in Job column are  : \\033[1m\",df_train['job'].isna().sum(),\"\\033[0m\")\n","print(\"The different types of Jobs are : \\033[1m\",df_train['job'].unique(),\"\\033[0m\\n\")\n","print(\"\\033[1mThe number of clients in each category of :\\033[0m\",df_train['job'].value_counts())"],"metadata":{"trusted":true,"id":"AopJhzxy5mWd"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["print(\"The null values in education column are  : \",\"\\033[1m\",df_train['education'].isna().sum(),\"\\033[0m\")\n","print(\"The different types of educational qualification are : \",\"\\033[1m\",df_train['education'].unique(),\"\\033[0m\\n\")\n","print(\"\\033[1mThe number of clients in each category of :\\033[0m\",df_train['education'].value_counts())"],"metadata":{"trusted":true,"id":"FVpgRN2F5mWd"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["print(\"The null values in poutcome  column are  : \",\"\\033[1m\", df_train['poutcome'].isna().sum(),\"\\033[0m\")\n","print(\"The different values  of poutcome column are : \",\"\\033[1m\",df_train['poutcome'].unique(),\"\\033[0m\")\n","print(\"\\033[1mThe number of clients in each category of :\\033[0m\",df_train['poutcome'].value_counts())"],"metadata":{"trusted":true,"id":"dttia4Yc5mWd"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["print(\"The null values in contact column are  : \",\"\\033[1m\",df_train['contact'].isna().sum(),'\\033[0m')\n","print(\"The different values in contact column are : \",\"\\033[1m\",df_train['contact'].unique())\n","print(\"\\033[1mThe number of clients in each category of :\\033[0m\",df_train['contact'].value_counts())"],"metadata":{"trusted":true,"id":"q-rCpQ2r5mWd"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["## 2. Data Visualization\n","\n"," ###   2.1 Histograms"],"metadata":{"id":"bxFCKK0W5mWd"}},{"cell_type":"code","source":["#num_fea = df_train.select_dtypes(exclude='object')\n","plt.figure(figsize=(8,8))\n","df_train.hist(layout=(2,3))\n","#num_fea.hist(layout=(2,3))\n","plt.suptitle(\"Distribution of Numerical features\")\n","plt.tight_layout()\n","plt.show()"],"metadata":{"trusted":true,"id":"JKNK5gk65mWe"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["### Insights\n","\n","#### The above histogram plots show us the distribution,skewness and outliers of the data of numerical columns.\n","\n","#### **age**\n","\n","- Most of the clients are in the age bracket of 25 to 60.\n","- Very less people are older than 75 years\n","\n","\n","#### **balance**\n","\n","- This column has a very long tail on the right side. Its highly right\n","  skewed. Most of the clients have a zero balance or very less balance\n","- Few of them have very high balance which is an outlier\n","\n","#### **duration**\n","\n","- Again duration has most of the values closer to 0 which indicates\n","  that the call duration is very short in most of the cases\n","\n","- There are a few cases where the duration is much higher to the tunes of more than an hour , which may be outliers\n","\n","\n","#### **campaign:**\n","  \n","  - Most people have been contacted very few times in this campaign.\n","    (with 0-5 being the most common). There are very few clients who have been contacted more than 10 times\n","\n","#### **pdays** :\n","\n","  - The plot shows that most of the pdays value near 0, meaning they\n","    were either recently contacted or had not been contacted in a previous campaign.\n","  - Very few numbers show higher pdays values, indicating that its been\n","    many days since they have been contacted previously.\n","\n","#### **previous**\n","\n"," - Most clients have been contacted very few times in the past as most\n","   of the values are closer to 0\n"],"metadata":{"id":"PE9xZR2Q5mWe"}},{"cell_type":"markdown","source":["### 2.2 'target' column distribution"],"metadata":{"id":"D5zHmAE75mWe"}},{"cell_type":"code","source":["plt.figure(figsize=(3,3))\n","df_train.target.hist()\n","plt.xlabel('Target')\n","plt.ylabel('Count')\n","df_train['target'].value_counts()"],"metadata":{"trusted":true,"id":"O4B5shuN5mWe"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### Insights\n","\n","\n","  * We can observe from the graph most of the clients have ***not subscribed*** for the         Term deposit.\n","  * This is highly imbalanced dataset\n"],"metadata":{"id":"82P8nvU05mWe"}},{"cell_type":"markdown","source":["####    2.3 Correlation Heat Map"],"metadata":{"id":"CMLHqaA15mWe"}},{"cell_type":"code","source":["num_fea=df_train.select_dtypes(exclude = 'object')\n","sns.heatmap(df_train[num_fea.columns].corr(),annot=True)"],"metadata":{"trusted":true,"id":"RFnAsa145mWf"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### Insights\n","\n","* The above heat map shows the correlation of all the 6 numerical features.\n","* The **age** feature doesnt have any correlation with any of the other features\n","* The **balance** has a maximum positive correlation (0.72) with **previous**                feature and moderately correlated with **campaign** and **duration**.This shows that persons with higher balances have been contacted more in the previous campaign and also spoken for a longer duration"],"metadata":{"id":"Zt_7ukpy5mWf"}},{"cell_type":"markdown","source":["### 2.4 Pair Plot"],"metadata":{"id":"OjwG8Bc35mWf"}},{"cell_type":"code","source":["plt.figure(figsize=(8,8))\n","sns.pairplot(df_train, diag_kind=\"hist\",hue='target')\n","plt.show()"],"metadata":{"trusted":true,"id":"aA7s60Q15mWf"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["**There is no specific pattern that can be observed in the above pair plot between each of the numerical variables**"],"metadata":{"id":"EvyZgnkp5mWf"}},{"cell_type":"markdown","source":["### 2.5 Scatter Plot\n"],"metadata":{"id":"eu3_B5qS5mWg"}},{"cell_type":"markdown","source":["####    2.5.1. ***Campaign Vs Duration***"],"metadata":{"id":"txQytU4o5mWg"}},{"cell_type":"code","source":["sns.scatterplot(x=df_train['campaign'],y=df_train['duration'], hue=df_train['target'])"],"metadata":{"trusted":true,"id":"UEReuZd-5mWg"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### Insights :\n","\n","* The scatter plot doesnt show any significant pattern to distinguish between the            target - **yes** and target - **no**.\n","* For **lower** values of **campaign** and **duration**, the term deposit is **not**         subscribed.\n","* Even more number of campaigns, there seems to be more of **'No'** than **'yes'** which     means** higher campaign values has not helped the bank to get clients**.\n","* If the **duration is high**, there seems to be more **'Yes'**(subscribers)\n"],"metadata":{"id":"iqTOBiJM5mWg"}},{"cell_type":"markdown","source":["####    2.5.2. ***Campaign Vs Balance***"],"metadata":{"id":"tpcHKc_15mWg"}},{"cell_type":"code","source":["sns.scatterplot(x=df_train['campaign'],y=df_train['balance'], hue=df_train['target'])"],"metadata":{"trusted":true,"id":"CLVs-phK5mWm"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### Insights :\n","\n"," * There seems to be a mix of 'yes' and 'no' at all values of yearly balance implying         that **balances** really **does not** have much impact on the target.\n"," * But **Lesser** the average yearly **balance** or balance close to zero, they have **not    subscribed** for the term deposit\n"," * Even contacting the client multiple times has not helped to grab the subscriber"],"metadata":{"id":"5H5EGMLh5mWn"}},{"cell_type":"markdown","source":["####    2.5.3. ***Campaign Vs Age***"],"metadata":{"id":"xhWVpZCj5mWn"}},{"cell_type":"code","source":["sns.scatterplot(x=df_train['age'],y=df_train['campaign'], hue=df_train['target'])"],"metadata":{"trusted":true,"id":"0tYw3sTa5mWn"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### Insights :\n","\n","   * The clients in the age bracket of **30 - 60** have **not subscribed** for **lesser**       number of **campaigns**.\n","   * More **'yes'** above**60 years** of age irrespective of the number of campaigns."],"metadata":{"id":"r6wo_sVy5mWn"}},{"cell_type":"markdown","source":["####    2.5.4. ***Campaign Vs previous***"],"metadata":{"id":"SoF-T4iF5mWn"}},{"cell_type":"code","source":["sns.scatterplot(x=df_train['previous'],y=df_train['campaign'], hue=df_train['target'])"],"metadata":{"trusted":true,"id":"7LjXr1yA5mWn"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### Insights :\n","\n","* Even with lesser number of previous contacts, people have subscribed in this campaign\n","\n","* There are mix of **'yes**' and **'no**' as the value of '**previous**' increases           with little higher proportion of '**No**'. This shows more number of contacts in           the previous campaign has discouraged the people to take the term deposit\n","    \n","* When the values of both **campaign** and **previous** are moderate, there are more         subscribers (yes) which implies to avoid higher contacts in any campaign."],"metadata":{"id":"QSt_YGfx5mWo"}},{"cell_type":"markdown","source":["### 2.6 Bar plots"],"metadata":{"id":"23M5Hn6d5mWo"}},{"cell_type":"markdown","source":["####  2.6.1 *Job Vs Target*   "],"metadata":{"id":"W7BwKKAe5mWo"}},{"cell_type":"code","source":["plt.figure(figsize=(12,12))\n","sns.countplot(x='job',hue = 'target',data=df_train,palette=['#2ca02c', '#d62728'])\n","\n","plt.xlabel('job',fontsize=10)\n","plt.ylabel('target',fontsize=10)\n","plt.title('job Vs target',fontsize=10)\n","#plt.xticks(rotation='horizontal')\n","plt.xticks(rotation=45, ha='right')\n","plt.legend()\n","plt.show()"],"metadata":{"trusted":true,"id":"Z8sTGEDr5mWo"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### Insights :\n","\n","* From this plot, we observe that people working in **Management** segment are the\n","  **top subscribers** and the **non subscribers** are highest in **blue collar** jobs\n","       \n","* Those working in  **services** segment are the least subscribers and **students** are      least non subscribers"],"metadata":{"id":"YYtDXfMS5mWo"}},{"cell_type":"markdown","source":["#### 2.6.2 *Bar Plot of Target Vs education,loan,housing and default*"],"metadata":{"id":"j1L15Rcc5mWo"}},{"cell_type":"code","source":["fig = plt.figure(figsize=(10,10))\n","\n","ax = fig.add_subplot(321)\n","#ax.title.set_text('education Vs target')\n","sns.countplot(x='education',hue = 'target',data=df_train, palette=['#2ca02c', '#d62728'])\n","\n","ax = fig.add_subplot(322)\n","#ax.title.set_text('loan')\n","sns.countplot(x='loan',hue = 'target',data=df_train, palette=['#2ca02c', '#d62728'])\n","\n","ax = fig.add_subplot(323)\n","#ax.title.set_text('default')\n","sns.countplot(x='default',hue = 'target',data=df_train,palette=['#2ca02c', '#d62728'])\n","\n","ax = fig.add_subplot(324)\n","#ax.title.set_text('housing')\n","sns.countplot(x='housing',hue = 'target',data=df_train,palette=['#2ca02c', '#d62728'])\n","\n","ax = fig.add_subplot(325)\n","#ax.title.set_text('Poutcome')\n","sns.countplot(x='poutcome',hue = 'target',data=df_train,palette=['#2ca02c', '#d62728'])\n","\n","ax = fig.add_subplot(326)\n","#ax.title.set_text('Contact')\n","sns.countplot(x='contact',hue = 'target',data=df_train,palette=['#2ca02c', '#d62728'])\n","\n","\n","\n","\n","\n","plt.show()"],"metadata":{"trusted":true,"id":"i53S_A-C5mWo"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### Insights :\n","\n","#####  **Relationship between target and**\n","* **Education**\n","  \n","     Those who have done their secondary education are the top subscribers\n","     Those who have done their primary education are least susbcribers\n","\n","* **Loan** : Persons who do not have personal loan are the top subscribers as they dont                 have liability\n","  \n","* **Default** :\n","     Those who are not credit defaulters are the highest subscribers\n","  \n","* **Housing** :\n","     Those who dont have housing loan are top subscribers\n","\n","* **poutcome**\n","\n","     - ***Failure*** : Under this label, which is highest in the graph, the current campaign outcome of **No** is **more**. This means the person's who didnt subscribe in the previous campaign have not subscribed in this campaign too.The number of **Yes** is very **low** here.\n","     - ***Success*** : Under this label, \"**yes**\" appears marginally more than **No**, meaning not all those who have subscribed in the previous campaign,have subscribed in this.\n","     - ***Other*** : In this category too, the **NO**s are outnumbering the **Yes**'\n","       \n","     - **This shows the outcome of previous campaign has an impact on the outcome of the current campaign**\n","\n","* **Contact**\n","     - More subscribers when contacted through mobile. It could be because most of the contact have been established through mobile phones than telephones\n","         \n","\n","\n","  "],"metadata":{"id":"oRk7HV4S5mWp"}},{"cell_type":"markdown","source":["## 3. Descriptive Statistics"],"metadata":{"id":"7cPJZAmz5mWp"}},{"cell_type":"code","source":["df_train.describe().T"],"metadata":{"trusted":true,"id":"yhiElUR55mWp"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":[" **Age** - The mean age is **42.120247**.\n","  * Age has a wide range from **18 - 95**.\n","  * The 25,50 and 75th percentile are in the range of **30-50** show that most of the clients are **middle aged**\n","\n"," **Balance**  \n","  * Some people have negative balance and the **maximum** balance is **102127**\n","  * 75th percentile of the people have balance of 2030.0 which is lesser than mean. This explains that the data is **highly skewed**\n","\n"," **duration**\n","  * The **mean** call **duration** is **439** seconds with minimum of 0 secs (which means didnt establish the call)\n","  * **Maximum** value is **4918** seconds which is as high as more than one hr.\n","  * The **variance** is very **high** indicating **wide range of call duration**\n","\n"," **campaign**\n","  * There is high variation with minimum value 1 and maximum at 63.\n","  * The median is 2, means 50% of the people have recieved around 2 calls\n","\n"," **pdays**\n","  * The values of 25,50,75th percentile are -1 which means **larger number of clients          have not been contacted previously**\n","\n","**Previous**\n","  * The average number of times a person is contacted previously is 12.\n","  * Most of the values (25,50,75) are 0 which explains that large chunk of people have not\n","    been contacted previously .\n","  * **Maximum** number is **275** which shows some of them are **contacted several times**."],"metadata":{"id":"XPjKVTgd5mWp"}},{"cell_type":"markdown","source":["###  Box plots to check outliers"],"metadata":{"id":"91YYZ6ob5mWq"}},{"cell_type":"code","source":["# fig = plt.figure(figsize=(12,8))\n","\n","# ax = fig.add_subplot(231)\n","# ax.title.set_text('Age')\n","# #sns.boxplot(data=df_train['age'])\n","# sns.boxplot(data=X_train['age'])\n","\n","# ax = fig.add_subplot(232)\n","# ax.title.set_text('Balance')\n","\n","# #sns.boxplot(data=df_train['balance'])\n","# sns.boxplot(data=X_train['balance'])\n","\n","# ax = fig.add_subplot(233)\n","# ax.title.set_text('Duration')\n","# sns.boxplot(data=X_train['duration'])\n","# #sns.boxplot(data=df_train['duration'])\n","\n","# ax = fig.add_subplot(234)\n","# ax.title.set_text('Campaign')\n","# #sns.boxplot(data=df_train['campaign'])\n","# sns.boxplot(data=X_train['campaign'])\n","\n","# ax = fig.add_subplot(235)\n","# ax.title.set_text('Pdays')\n","# #sns.boxplot(data=df_train['pdays'])\n","# sns.boxplot(data=X_train['pdays'])\n","\n","# ax = fig.add_subplot(236)\n","# ax.title.set_text('Previous')\n","# #sns.boxplot(data=df_train['previous'])\n","# sns.boxplot(data=X_train['previous'])\n","\n","# plt.show()"],"metadata":{"trusted":true,"id":"CIQdGINH5mWq"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### Insights :\n","\n","\n","* **Age** column has very few outliers in the range of 70 - 90 years.\n","  \n","*   All other columns like **balance**,**duration**  **campaign**, **pdays** and  **previous**  have lots of outliers\n","\n"],"metadata":{"id":"KMRBvT055mWq"}},{"cell_type":"markdown","source":["## 4. Data Preprocessing and Feature Engineering"],"metadata":{"id":"6v_EFdYj5mWr"}},{"cell_type":"markdown","source":["#### 4.1 Splitting of last contact date"],"metadata":{"id":"gogJhtz45mWr"}},{"cell_type":"markdown","source":["\n","\n","  * Convert **last contact date**  column to **datetime** datatype\n","\n","  * Split it into **date,month** and **year**. Extracting the information **day of the           week** and **month name**.\n","\n","  * Drop date column\n","     "],"metadata":{"id":"6DP-7KcS5mWr"}},{"cell_type":"code","source":["df_train['last contact date']= pd.to_datetime(df_train['last contact date'])\n","df_train['year']= df_train['last contact date'].dt.year\n","df_train['month']=df_train['last contact date'].dt.month\n","df_train['day']= df_train['last contact date'].dt.day\n","df_train['day_name']=df_train['last contact date'].dt.day_name()\n","df_train['month_name']=df_train['last contact date'].dt.month_name()\n"],"metadata":{"execution":{"iopub.status.busy":"2024-11-30T17:06:44.272455Z","iopub.execute_input":"2024-11-30T17:06:44.272837Z","iopub.status.idle":"2024-11-30T17:06:44.321822Z","shell.execute_reply.started":"2024-11-30T17:06:44.272801Z","shell.execute_reply":"2024-11-30T17:06:44.32095Z"},"trusted":true,"id":"EygIb53Z5mWr"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["df_train.info()"],"metadata":{"trusted":true,"id":"di5XnzFj5mWs"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["df_train=df_train.drop('last contact date',axis=1)\n","df_train.shape"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T17:06:48.977382Z","iopub.execute_input":"2024-11-30T17:06:48.978126Z","iopub.status.idle":"2024-11-30T17:06:48.995987Z","shell.execute_reply.started":"2024-11-30T17:06:48.97809Z","shell.execute_reply":"2024-11-30T17:06:48.995019Z"},"id":"cSSNyrLE5mWs"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["df_train.head()"],"metadata":{"trusted":true,"id":"rPPNZNKF5mWs"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["# Handling outliers"],"metadata":{"id":"x0KUVzf55mWs"}},{"cell_type":"code","source":["# IQR = df_train['age'].quantile(0.75) - df_train['age'].quantile(0.25)\n","# lower_bound = df_train['age'].quantile(0.25)-1.5*IQR\n","# upper_bound = df_train['age'].quantile(0.75)+1.5*IQR\n","# # Cap the outliers\n","# df_train['age'] = df_train['age'].clip(lower=lower_bound, upper=upper_bound)\n","# df_test['age'] = df_test['age'].clip(lower=lower_bound, upper=upper_bound)\n","\n","\n","# IQR = df_train['balance'].quantile(0.75) - df_train['balance'].quantile(0.25)\n","# lower_bound = df_train['balance'].quantile(0.25)-1.5*IQR\n","# upper_bound = df_train['balance'].quantile(0.75)+1.5*IQR\n","# # Cap the outliers\n","# df_train['balance'] = df_train['balance'].clip(lower=lower_bound, upper=upper_bound)\n","# df_test['balance'] = df_test['balance'].clip(lower=lower_bound, upper=upper_bound)\n","\n","\n","# IQR = df_train['duration'].quantile(0.75) - df_train['duration'].quantile(0.25)\n","# lower_bound = df_train['duration'].quantile(0.25)-1.5*IQR\n","# upper_bound = df_train['duration'].quantile(0.75)+1.5*IQR\n","# # Cap the outliers\n","# df_train['duration'] = df_train['duration'].clip(lower=lower_bound, upper=upper_bound)\n","# df_test['duration'] = df_test['duration'].clip(lower=lower_bound, upper=upper_bound)\n","\n","# IQR = df_train['campaign'].quantile(0.75) - df_train['campaign'].quantile(0.25)\n","# lower_bound = df_train['campaign'].quantile(0.25)-1.5*IQR\n","# upper_bound = df_train['campaign'].quantile(0.75)+1.5*IQR\n","# # Cap the outliers\n","# df_train['campaign'] = df_train['campaign'].clip(lower=lower_bound, upper=upper_bound)\n","# df_test['campaign'] = df_test['campaign'].clip(lower=lower_bound, upper=upper_bound)\n","\n","\n","\n","# IQR = df_train['pdays'].quantile(0.75) - df_train['pdays'].quantile(0.25)\n","# lower_bound = df_train['pdays'].quantile(0.25)-1.5*IQR\n","# upper_bound = df_train['pdays'].quantile(0.75)+1.5*IQR\n","# # Cap the outliers\n","# df_train['pdays'] = df_train['pdays'].clip(lower=lower_bound, upper=upper_bound)\n","# df_test['pdays'] = df_test['pdays'].clip(lower=lower_bound, upper=upper_bound)\n","\n","\n","\n","# IQR = df_train['previous'].quantile(0.75) - df_train['previous'].quantile(0.25)\n","# lower_bound = df_train['previous'].quantile(0.25)-1.5*IQR\n","# upper_bound = df_train['previous'].quantile(0.75)+1.5*IQR\n","# # Cap the outliers\n","# df_train['previous'] = df_train['previous'].clip(lower=lower_bound, upper=upper_bound)\n","# df_test['previous_'] = df_test['previous'].clip(lower=lower_bound, upper=upper_bound)\n","\n"],"metadata":{"trusted":true,"id":"0Mprr-zT5mWs"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["df_train.info()"],"metadata":{"trusted":true,"id":"vzobJgHC5mWs"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### 4.2 Split the Dataset into train and validation set\n","\n","\n"," - Dataset is split into features and target\n","    \n"," - The target column is Label Encoded\n","    \n"," - The dataset is split into 75% train and 25 % validation set with stratification as the dataset is imbalanced."],"metadata":{"id":"w12jxj6b5mWv"}},{"cell_type":"code","source":["# Separating feature and target\n","X=df_train.drop('target',axis = 1)\n","y=df_train['target']\n","\n","#Label encoding target column\n","label_enc=LabelEncoder()\n","y=label_enc.fit_transform(y)\n","\n","#Splitting into train and validation set\n","X_train,X_val,y_train,y_val=train_test_split(X,y,test_size=0.25,stratify=y,random_state=42)\n","X_train.shape,X_val.shape,y_train.shape,y_val.shape\n","X_train.head()"],"metadata":{"execution":{"iopub.status.busy":"2024-11-30T17:06:57.518632Z","iopub.execute_input":"2024-11-30T17:06:57.519001Z","iopub.status.idle":"2024-11-30T17:06:57.577788Z","shell.execute_reply.started":"2024-11-30T17:06:57.518971Z","shell.execute_reply":"2024-11-30T17:06:57.576848Z"},"trusted":true,"id":"Wkp2EsQq5mWv"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# #IQR = X_train['age'].quantile(0.75) - X_train['age'].quantile(0.25)\n","# lower_bound = X_train['age'].quantile(.05)\n","# upper_bound = X_train['age'].quantile(0.95)\n","# # # Cap the outliers on train and validation data\n","# X_train['age'] = X_train['age'].clip(lower=lower_bound, upper=upper_bound)\n","# X_val['age']=X_val['age'].clip(lower=lower_bound, upper=upper_bound)\n","\n","# # IQR1 = df_train['age'].quantile(0.75) - df_train['age'].quantile(0.25)\n","# lower_bound = df_train['age'].quantile(0.05)\n","# upper_bound = df_train['age'].quantile(0.95)\n","# # # Cap the outliers on test data\n","# df_test['age'] = df_test['age'].clip(lower=lower_bound, upper=upper_bound)\n","# # #************\n","\n","# lower_bound = X_train['balance'].quantile(.05)\n","# upper_bound = X_train['balance'].quantile(0.95)\n","# # # Cap the outliers on train and validation data\n","# X_train['balance'] = X_train['balance'].clip(lower=lower_bound, upper=upper_bound)\n","# X_val['balance']=X_val['balance'].clip(lower=lower_bound, upper=upper_bound)\n","\n","# # IQR1 = df_train['age'].quantile(0.75) - df_train['age'].quantile(0.25)\n","# lower_bound = df_train['balance'].quantile(0.05)\n","# upper_bound = df_train['balance'].quantile(0.95)\n","# # # Cap the outliers on test data\n","# df_test['balance'] = df_test['balance'].clip(lower=lower_bound, upper=upper_bound)\n","# # #**************\n","# lower_bound = X_train['duration'].quantile(.05)\n","# upper_bound = X_train['duration'].quantile(0.95)\n","# # # Cap the outliers on train and validation data\n","# X_train['duration'] = X_train['duration'].clip(lower=lower_bound, upper=upper_bound)\n","# X_val['duration']=X_val['duration'].clip(lower=lower_bound, upper=upper_bound)\n","\n","# # IQR1 = df_train['age'].quantile(0.75) - df_train['age'].quantile(0.25)\n","# lower_bound = df_train['duration'].quantile(0.05)\n","# upper_bound = df_train['duration'].quantile(0.95)\n","# # # Cap the outliers on test data\n","# df_test['duration'] = df_test['duration'].clip(lower=lower_bound, upper=upper_bound)\n","\n","# # #*****************\n","\n","# lower_bound = X_train['campaign'].quantile(.05)\n","# upper_bound = X_train['campaign'].quantile(0.95)\n","# # # Cap the outliers on train and validation data\n","# X_train['campaign'] = X_train['campaign'].clip(lower=lower_bound, upper=upper_bound)\n","# X_val['campaign']=X_val['campaign'].clip(lower=lower_bound, upper=upper_bound)\n","\n","# # IQR1 = df_train['age'].quantile(0.75) - df_train['age'].quantile(0.25)\n","# lower_bound = df_train['campaign'].quantile(0.05)\n","# upper_bound = df_train['campaign'].quantile(0.95)\n","# # # Cap the outliers on test data\n","# df_test['campaign'] = df_test['campaign'].clip(lower=lower_bound, upper=upper_bound)\n","# # #******************\n","\n","\n","# lower_bound = X_train['pdays'].quantile(.05)\n","# upper_bound = X_train['pdays'].quantile(0.95)\n","# # # Cap the outliers on train and validation data\n","# X_train['pdays'] = X_train['pdays'].clip(lower=lower_bound, upper=upper_bound)\n","# X_val['pdays']=X_val['pdays'].clip(lower=lower_bound, upper=upper_bound)\n","\n","# # IQR1 = df_train['age'].quantile(0.75) - df_train['age'].quantile(0.25)\n","# lower_bound = df_train['pdays'].quantile(0.05)\n","# upper_bound = df_train['pdays'].quantile(0.95)\n","# # # Cap the outliers on test data\n","# df_test['pdays'] = df_test['pdays'].clip(lower=lower_bound, upper=upper_bound)\n","\n","# # #************************************\n","\n","# lower_bound = X_train['previous'].quantile(.05)\n","# upper_bound = X_train['previous'].quantile(0.95)\n","# # # Cap the outliers on train and validation data\n","# X_train['previous'] = X_train['previous'].clip(lower=lower_bound, upper=upper_bound)\n","# X_val['previous']=X_val['previous'].clip(lower=lower_bound, upper=upper_bound)\n","\n","# # IQR1 = df_train['age'].quantile(0.75) - df_train['age'].quantile(0.25)\n","# lower_bound = df_train['previous'].quantile(0.05)\n","# upper_bound = df_train['previous'].quantile(0.95)\n","# # # Cap the outliers on test data\n","# df_test['previous'] = df_test['previous'].clip(lower=lower_bound, upper=upper_bound)\n","\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T15:11:01.78862Z","iopub.execute_input":"2024-11-28T15:11:01.789139Z","iopub.status.idle":"2024-11-28T15:11:01.875565Z","shell.execute_reply.started":"2024-11-28T15:11:01.789099Z","shell.execute_reply":"2024-11-28T15:11:01.874391Z"},"id":"rxYmNugc5mWv"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["IQR = X_train['age'].quantile(0.75) - X_train['age'].quantile(0.25)\n","lower_bound = X_train['age'].quantile(0.25)-1.5*IQR\n","upper_bound = X_train['age'].quantile(0.75)+1.5*IQR\n","# Cap the outliers on train and validation data\n","X_train['age'] = X_train['age'].clip(lower=lower_bound, upper=upper_bound)\n","X_val['age']=X_val['age'].clip(lower=lower_bound, upper=upper_bound)\n","\n","IQR1 = df_train['age'].quantile(0.75) - df_train['age'].quantile(0.25)\n","lower_bound = df_train['age'].quantile(0.25)-1.5*IQR1\n","upper_bound = df_train['age'].quantile(0.75)+1.5*IQR1\n","# Cap the outliers on test data\n","df_test['age'] = df_test['age'].clip(lower=lower_bound, upper=upper_bound)\n","#************\n","\n","IQR = X_train['balance'].quantile(0.75) - X_train['balance'].quantile(0.25)\n","lower_bound = X_train['balance'].quantile(0.25)-1.5*IQR\n","upper_bound = X_train['balance'].quantile(0.75)+1.5*IQR\n","# Cap the outliers on train and validation\n","X_train['balance'] = X_train['balance'].clip(lower=lower_bound, upper=upper_bound)\n","X_val['balance'] = X_val['balance'].clip(lower=lower_bound, upper=upper_bound)\n","\n","IQR1 = df_train['balance'].quantile(0.75) - df_train['balance'].quantile(0.25)\n","lower_bound = df_train['balance'].quantile(0.25)-1.5*IQR1\n","upper_bound = df_train['balance'].quantile(0.75)+1.5*IQR1\n","# Cap the outliers on test data\n","df_test['balance'] = df_test['balance'].clip(lower=lower_bound, upper=upper_bound)\n","#**************\n","\n","IQR = X_train['duration'].quantile(0.75) - X_train['duration'].quantile(0.25)\n","lower_bound = X_train['duration'].quantile(0.25)-1.5*IQR\n","upper_bound = X_train['duration'].quantile(0.75)+1.5*IQR\n","# Cap the outliers on train and validation set\n","X_train['duration'] = X_train['duration'].clip(lower=lower_bound, upper=upper_bound)\n","X_val['duration'] = X_val['duration'].clip(lower=lower_bound, upper=upper_bound)\n","\n","IQR1 = df_train['duration'].quantile(0.75) - df_train['duration'].quantile(0.25)\n","lower_bound = df_train['duration'].quantile(0.25)-1.5*IQR1\n","upper_bound = df_train['duration'].quantile(0.75)+1.5*IQR1\n","# Cap the outliers on test data\n","df_test['duration'] = df_test['duration'].clip(lower=lower_bound, upper=upper_bound)\n","#*****************\n","\n","IQR = X_train['campaign'].quantile(0.75) - X_train['campaign'].quantile(0.25)\n","lower_bound = X_train['campaign'].quantile(0.25)-1.5*IQR\n","upper_bound = X_train['campaign'].quantile(0.75)+1.5*IQR\n","# Cap the outliers on train and validation\n","X_train['campaign'] = X_train['campaign'].clip(lower=lower_bound, upper=upper_bound)\n","X_val['campaign'] = X_val['campaign'].clip(lower=lower_bound, upper=upper_bound)\n","\n","IQR1 = df_train['campaign'].quantile(0.75) - df_train['campaign'].quantile(0.25)\n","lower_bound = df_train['campaign'].quantile(0.25)-1.5*IQR1\n","upper_bound = df_train['campaign'].quantile(0.75)+1.5*IQR1\n","#Cap the outliers on test data\n","df_test['campaign'] = df_test['campaign'].clip(lower=lower_bound, upper=upper_bound)\n","#******************\n","\n","\n","IQR = X_train['pdays'].quantile(0.75) - X_train['pdays'].quantile(0.25)\n","#IQR = X_train['pdays'].quantile(0.99) - X_train['pdays'].quantile(0.01)\n","\n","lower_bound = X_train['pdays'].quantile(0.25)-1.5*IQR\n","upper_bound = X_train['pdays'].quantile(0.75)+1.5*IQR\n","# Cap the outliers on train and validation data\n","X_train['pdays'] = X_train['pdays'].clip(lower=lower_bound, upper=upper_bound)\n","X_val['pdays'] = X_val['pdays'].clip(lower=lower_bound, upper=upper_bound)\n","\n","IQR1 = df_train['pdays'].quantile(0.75) - df_train['pdays'].quantile(0.25)\n","lower_bound = df_train['pdays'].quantile(0.25)-1.5*IQR1\n","upper_bound = df_train['pdays'].quantile(0.75)+1.5*IQR1\n","# Cap the outliers on test data\n","df_test['pdays'] = df_test['pdays'].clip(lower=lower_bound, upper=upper_bound)\n","#************************************\n","\n","\n","#IQR = X_train['previous'].quantile(0.75) - X_train['previous'].quantile(0.25)\n","IQR = X_train['previous'].quantile(0.99) - X_train['previous'].quantile(0.01)\n","lower_bound = X_train['previous'].quantile(0.01)-1.5*IQR\n","upper_bound = X_train['previous'].quantile(0.99)+1.5*IQR\n","# Cap the outliers nn train data and validation\n","X_train['previous'] = X_train['previous'].clip(lower=lower_bound, upper=upper_bound)\n","X_val['previous'] = X_val['previous'].clip(lower=lower_bound, upper=upper_bound)\n","\n","\n","IQR1 = df_train['previous'].quantile(0.99) - df_train['previous'].quantile(0.01)\n","lower_bound = df_train['previous'].quantile(0.01)-1.5*IQR1\n","upper_bound = df_train['previous'].quantile(0.99)+1.5*IQR1\n","# Cap the outliers on test data\n","df_test['previous'] = df_test['previous'].clip(lower=lower_bound, upper=upper_bound)\n","\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T17:07:05.909646Z","iopub.execute_input":"2024-11-30T17:07:05.910321Z","iopub.status.idle":"2024-11-30T17:07:06.027453Z","shell.execute_reply.started":"2024-11-30T17:07:05.910261Z","shell.execute_reply":"2024-11-30T17:07:06.026346Z"},"id":"FrRwAd3M5mWv"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### 4.3 Feature Transformation\n","\n","    \n"," - The missing values are **Simple imputed** with '**most frequent**' strategy\n","\n"," - The Categorical features except **education** are **One hot Encoded**.\n"," - The **education** feature is **ordinally encoded** as there is an order in the values\n"," - The Numerical features are scaled using **Standard Scaler**\n","  \n"," - Appropriate **Pipelines** and **column transformers** are used to transform the features\n"],"metadata":{"id":"sfy72-dq5mWw"}},{"cell_type":"code","source":["# # Pipeline to impute and encode\n","# imp_ohe_pipe=Pipeline([('si',SimpleImputer(strategy='most_frequent')),\n","#                        ('ohe',OneHotEncoder(sparse_output=False,drop='first'))])\n","\n","# # Pipeline to do One Hot encode\n","# mar_pipe=Pipeline([('mar_ohe',OneHotEncoder(sparse_output=False,drop='first'))])\n","\n","# #Pipeline to do ordinal encoding and scaling\n","# im_edu_pipe=Pipeline([('si_edu',SimpleImputer(strategy='most_frequent')),\n","#                        ('oe_edu',OrdinalEncoder()),('ss_edu',StandardScaler())])\n","\n","# #Column Tranformer transforming appropriate columns\n","# ct=ColumnTransformer(transformers=[('ss',StandardScaler(),['age','balance','duration','campaign','pdays','previous','year','day','month']),\n","#                                    ('im_ohe_job',imp_ohe_pipe,['job','poutcome','contact']),\n","#                                    # ('im_pout',im_ohe_pout_pipe,['poutcome']),\n","#                                    ('mar_ohe_scale',mar_pipe,['marital','default','housing','loan','day_name','month_name']),\n","#                                    ('im_edu',im_edu_pipe,['education'])],\n","#                                    remainder='passthrough',verbose_feature_names_out=False).set_output(transform='pandas')\n","# ct"],"metadata":{"trusted":true,"id":"AedsQak75mWw"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["imp_ohe_pipe=Pipeline([('si',SimpleImputer(strategy='constant',fill_value='other')),\n","                       ('ohe',OneHotEncoder(sparse_output=False,drop='first'))])\n","im_ohe_pout_pipe=Pipeline([('si',SimpleImputer(strategy='constant',fill_value='unknown')),\n","                       ('ohe',OneHotEncoder(sparse_output=False,drop='first'))])\n","\n","\n","#im_edu_pipe=Pipeline([('si_edu',SimpleImputer(strategy='constant',fill_value='primary')),\n","                      # ('oe_edu',OrdinalEncoder()),('ss_edu',StandardScaler())])\n","mar_pipe=Pipeline([('mar_ohe',OneHotEncoder(sparse_output=False,drop='first'))])\n","im_edu_pipe=Pipeline([('si_edu',SimpleImputer(strategy='constant', fill_value='other')),\n","                       ('oe_edu',OrdinalEncoder()),('ss_edu',StandardScaler())])\n","ct=ColumnTransformer(transformers=[('ss',StandardScaler(),['age','balance','duration','campaign','pdays','previous','year','day','month']),\n","                                   ('im_ohe_job',imp_ohe_pipe,['job','contact']),\n","                                   ('im_pout',im_ohe_pout_pipe,['poutcome']),\n","                                   ('mar_ohe_scale',mar_pipe,['marital','default','housing','loan','day_name','month_name']),\n","                                    # ,'day_name','month_name']),\n","                                   ('im_edu',im_edu_pipe,['education'])],\n","                                  # ('im_cont',im_contact_pipe,['contact'])],\n","                    remainder='passthrough',verbose_feature_names_out=False).set_output(transform='pandas')\n","ct"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T17:07:13.436203Z","iopub.execute_input":"2024-11-30T17:07:13.436553Z","iopub.status.idle":"2024-11-30T17:07:13.490956Z","shell.execute_reply.started":"2024-11-30T17:07:13.436518Z","shell.execute_reply":"2024-11-30T17:07:13.489916Z"},"id":"DhkVdze05mWw"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### 4.4 Tranforming train and validation set"],"metadata":{"id":"M5AtcehW5mWw"}},{"cell_type":"code","source":["# Tranforming train and validation set\n","\n","train_tf=ct.fit_transform(X_train)\n","val_tf=ct.transform(X_val)\n","print(train_tf.shape,val_tf.shape)\n","train_tf.head()\n","train_tf.info()"],"metadata":{"execution":{"iopub.status.busy":"2024-11-30T17:07:20.014771Z","iopub.execute_input":"2024-11-30T17:07:20.015797Z","iopub.status.idle":"2024-11-30T17:07:20.251455Z","shell.execute_reply.started":"2024-11-30T17:07:20.015745Z","shell.execute_reply":"2024-11-30T17:07:20.250366Z"},"trusted":true,"id":"UusHMeZJ5mWw"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["train_tf.head()"],"metadata":{"trusted":true,"id":"BspH_5QP5mWx"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### 4.5 Feature Engineering on date column of Test set"],"metadata":{"id":"BDQn3Soe5mWx"}},{"cell_type":"code","source":["df_test['last contact date']=pd.to_datetime(df_test['last contact date'])\n","df_test['year']= df_test['last contact date'].dt.year\n","df_test['month']=df_test['last contact date'].dt.month\n","df_test['day']= df_test['last contact date'].dt.day\n","\n","df_test['day_name']=df_test['last contact date'].dt.day_name()\n","df_test['month_name']=df_test['last contact date'].dt.month_name()\n","X_test=df_test.drop('last contact date',axis =1)\n","X_test.info()"],"metadata":{"execution":{"iopub.status.busy":"2024-11-30T17:07:24.185926Z","iopub.execute_input":"2024-11-30T17:07:24.186821Z","iopub.status.idle":"2024-11-30T17:07:24.218055Z","shell.execute_reply.started":"2024-11-30T17:07:24.186783Z","shell.execute_reply":"2024-11-30T17:07:24.217044Z"},"trusted":true,"id":"7UEpomsH5mWx"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### 4.5 Transformation on test set"],"metadata":{"id":"18Tz41UF5mWx"}},{"cell_type":"code","source":["X_test.info()"],"metadata":{"trusted":true,"id":"nKXlkvbD5mWx"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["X_test_tf=ct.transform(X_test)\n","print(\"The shape of transformed train and validation set  : \", train_tf.shape,val_tf.shape)\n","print(\"The shape of transformed test set                  : \", X_test_tf.shape)"],"metadata":{"execution":{"iopub.status.busy":"2024-11-30T17:07:28.636019Z","iopub.execute_input":"2024-11-30T17:07:28.63689Z","iopub.status.idle":"2024-11-30T17:07:28.694075Z","shell.execute_reply.started":"2024-11-30T17:07:28.636851Z","shell.execute_reply":"2024-11-30T17:07:28.693015Z"},"trusted":true,"id":"ZL8Bu-ZJ5mWx"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["##### After Imputing, Encoding and Scaling, the features have increased to 45."],"metadata":{"id":"nLOMcp005mWx"}},{"cell_type":"markdown","source":["# Model Building"],"metadata":{"id":"Txq_gmSH5mWx"}},{"cell_type":"markdown","source":["##  Model 0 :  Dummy classifier"],"metadata":{"id":"L8Y8HRsZ5mWy"}},{"cell_type":"code","source":["# from sklearn.dummy import DummyClassifier\n","# X=df_train.drop('target',axis=1)\n","# y=df_train['target']\n","# dum_clf=DummyClassifier(strategy='most_frequent').fit(X,y)\n","\n","# X_test=df_test\n","# y_pred=dum_clf.predict(X_test)"],"metadata":{"trusted":true,"id":"R2vWqT485mWy"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### Submission for Dummy"],"metadata":{"id":"HI8QDaIB5mWy"}},{"cell_type":"code","source":["# submission = pd.DataFrame({\"id\": range(0,10000),\n","#                            \"target\": y_pred})\n","# submission.to_csv('submission.csv',index=False)"],"metadata":{"trusted":true,"id":"YBaT2Dfl5mWy"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["## Model 1 : SGD Classifier Model"],"metadata":{"id":"-kOY6LXx5mWy"}},{"cell_type":"markdown","source":["#### 1.1 ***Fitting the model with default values***"],"metadata":{"id":"NMCSPDYa5mWy"}},{"cell_type":"code","source":["# # Fitting the model with default values on the train set with class weight parameter\n","# # as the dataset imbalanced\n","\n","# sgd_new=SGDClassifier(random_state=42,class_weight={0:.5,1:2})\n","# sgd_new.fit(train_tf,y_train)\n","\n","# # Prediction on train and validation set\n","\n","# ypred_train=sgd_new.predict(train_tf)\n","# ypredict=sgd_new.predict(val_tf)\n","\n","# # Printing the score\n","\n","# print(\"Training score   : \" ,f1_score(y_train,ypred_train,average='macro'))\n","# print(\"validation score : \",f1_score(y_val,ypredict,average='macro'))\n"],"metadata":{"trusted":true,"id":"Ar2Yo8mw5mWy"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### 1.2 ***Hyper parameter tuning the SGD Classifier using RandomisedSearchCV***"],"metadata":{"id":"bOUf4b_H5mWy"}},{"cell_type":"code","source":["# sgd = SGDClassifier(random_state=42,class_weight={0:0.5,1:2},warm_start=True)\n","\n","# param_distributions = {\n","#     'loss': ['hinge', 'log_loss'],\n","#     'penalty': ['l2', 'l1', 'elasticnet'],\n","#     'alpha': [.0001,.001,.01,0.1],\n","#     'max_iter': [500,1000,1500,1800,2000],\n","#     'learning_rate': ['constant', 'optimal', 'invscaling', 'adaptive'],\n","#     'eta0': [0.1,.01,.001,.0001],\n","#     'tol' : [.0001,.001,.01]\n","# }\n","\n","# ran = RandomizedSearchCV(\n","#     sgd, param_distributions, n_iter=50, cv=5, random_state=42, n_jobs=-1\n","# )\n","# ran.fit(train_tf,y_train)"],"metadata":{"trusted":true,"id":"pKpf6pu25mWz"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# ran.best_params_"],"metadata":{"trusted":true,"id":"2qCSk3VW5mWz"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#####  ***Training the model with best parameters***"],"metadata":{"id":"fs4UKeul5mWz"}},{"cell_type":"code","source":["# # Prediction on train and validation set after Hyper parameter tuning\n","\n","# ypred_train=ran.predict(train_tf)\n","# ypredict=ran.predict(val_tf)\n","\n","# # Printing the score\n","\n","# print(\"Training score   : \" ,f1_score(y_train,ypred_train,average='macro'))\n","# print(\"validation score : \",f1_score(y_val,ypredict,average='macro'))"],"metadata":{"trusted":true,"id":"1Y55ccrA5mWz"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["##### ***Performance of SGD classifier model after Hyper parameter tuning***\n","\n","*  Both the training  and validation score improved marginally"],"metadata":{"id":"myVxEyFv5mWz"}},{"cell_type":"markdown","source":["#### 1.3 ***Feature Selection using RFE (Recursive Feature Elimination)***"],"metadata":{"id":"WhAURRBG5mWz"}},{"cell_type":"code","source":["# #Using RFE on SGD classifier , selecting 30 features.\n","# rfe_sgd=RFE(sgd,n_features_to_select=30)\n","# rfe_sgd.fit(train_tf,y_train)"],"metadata":{"trusted":true,"id":"Ly50LQsi5mWz"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# # Prediction on train and validation set\n","\n","# ypred_train=rfe_sgd.predict(train_tf)\n","# ypredict=rfe_sgd.predict(val_tf)\n","\n","# # Printing the score\n","\n","# print(\"Training score   : \" ,f1_score(y_train,ypred_train,average='macro'))\n","# print(\"validation score : \",f1_score(y_val,ypredict,average='macro'))\n"],"metadata":{"trusted":true,"id":"g8QOOWqo5mWz"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["##### ***Performance of SGD classifier model after RFE***\n","\n","*  The training score and validation score are more or less the same"],"metadata":{"id":"KbANizeu5mW0"}},{"cell_type":"markdown","source":["#### 1.4 ***Retraining the model by changing the regualarization parameters***\n","\n","##### Tried to reduce the **regularization factor**, **eta0** and **tol** values and increased **max_iter**.  "],"metadata":{"id":"9kayfp7x5mW0"}},{"cell_type":"code","source":["# sgd_new=SGDClassifier(loss='hinge',alpha=0.00001,eta0=0.001,\n","#                       learning_rate='constant',tol=1e-5,max_iter=2500,\n","#                       random_state=42,class_weight='balanced',warm_start=True) #-0.0.7451\n","\n","# #sgd_new=SGDClassifier(loss='log_loss',alpha=0.0001,eta0=0.01,learning_rate='constant',random_state=42,class_weight={0:0.7,1:2}) #0.7117\n","# sgd_new.fit(train_tf,y_train)"],"metadata":{"trusted":true,"id":"Tye_VO3b5mW0"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# # Prediction on train and validation set\n","\n","# ypred_train=sgd_new.predict(train_tf)\n","# ypredict=sgd_new.predict(val_tf)\n","\n","# # Printing the score\n","\n","# print(\"Training score   : \" ,f1_score(y_train,ypred_train,average='macro'))\n","# print(\"validation score : \",f1_score(y_val,ypredict,average='macro'))\n","# sgd_val=f1_score(y_val,ypredict,average='macro')\n"],"metadata":{"trusted":true,"id":"_K8G6XCf5mW0"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["##### It improved the performance of the model"],"metadata":{"id":"DYhMCMZ85mW0"}},{"cell_type":"markdown","source":["### Insights of SGD Classifier :\n","\n","* **Default Values** : The model gives a train score of **0.718** and validation score of  **0.737**\n","* **HPT** : The model's score improved marginally after hyper parameter tuning with train score of **0.7237** and validation score of **0.7423**\n","* **RFE**: The Model's score remained more or less the same with feature elimination.\n","* Modified the regularizaion parameters , **the score improved** with train score of **0.74996** and validation score of **0.7523**\n"],"metadata":{"id":"wuZJhafR5mW0"}},{"cell_type":"markdown","source":["# Model 2 : Support Vector Machine (SVM)"],"metadata":{"id":"4nrWGsv75mW0"}},{"cell_type":"markdown","source":["#### 2.1 Training the SVC Model with default parameters"],"metadata":{"id":"nF1OBbrl5mW0"}},{"cell_type":"code","source":["# #Training the SVC Model with default parameters\n","\n","# svm = SVC(random_state=42,class_weight={0:.8,1:2})\n","# #svm=SVC(kernel='rbf',random_state=42,class_weight={0:.8,1:2},gamma=.05,C=1)\n","\n","# svm.fit(train_tf,y_train)"],"metadata":{"trusted":true,"id":"gOiUGhcN5mW0"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# # Prediction on train and validation set .\n","\n","# ypred_train=svm.predict(train_tf)\n","# ypredict=svm.predict(val_tf)\n","\n","# # Printing the score\n","\n","# print(\"Training score   : \" ,f1_score(y_train,ypred_train,average='macro'))\n","# print(\"validation score : \",f1_score(y_val,ypredict,average='macro'))\n","\n","# #Displaying the confusion matrix\n","\n","# cm=confusion_matrix(y_val,ypredict)\n","# cdisplay = ConfusionMatrixDisplay(cm)\n","# cdisplay.plot()\n"],"metadata":{"trusted":true,"id":"Kr63Fdcr5mW1"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### 2.2 **Hyper tuning the SVM**"],"metadata":{"id":"34ACx8j95mW1"}},{"cell_type":"code","source":["# param_grid={\n","#     'kernel' : ['linear','rbf'],\n","#     'C' : [.01,.1,1,10],\n","#     'gamma' : [.01,.05,.1,1,10]}\n","# rn_grid=RandomizedSearchCV(SVC(random_state=42,class_weight={0:.8,1:2}),param_grid,cv=5,scoring='f1',n_jobs=-1,random_state=42)\n","# rn_grid.fit(train_tf,y_train)\n","# rn_grid.best_params_"],"metadata":{"trusted":true,"id":"5-aj5TD55mW1"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["**The best parameters obtained are**:\n","\n","{'kernel': 'rbf', 'gamma': 0.05, 'C': 0.1}="],"metadata":{"id":"IXXD-vwo5mW1"}},{"cell_type":"code","source":["# #Retraining the model using best parameters\n","# #svm=SVC(kernel='rbf',random_state=42,class_weight={0:.8,1:2},gamma=.05,C=.1)#(0.7600,0.7661)\n","\n","# #Changing the values of C\n","# #C=0.5\n","# #svm=SVC(kernel='rbf',random_state=42,class_weight={0:.8,1:2},gamma=.05,C=.5)#(0.7738,0.7694)\n","# #C=1\n","# svm=SVC(kernel='rbf',random_state=42,class_weight={0:.8,1:2},gamma=.05,C=1) #(0.7870,7714)\n","# svm.fit(train_tf,y_train)"],"metadata":{"trusted":true,"id":"RvCfwGDv5mW1"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# # Prediction of train and validation score\n","\n","# ypred_train=svm.predict(train_tf)\n","# ypredict=svm.predict(val_tf)\n","\n","# # Printing the score\n","\n","# print(\"Training score   : \" ,f1_score(y_train,ypred_train,average='macro'))\n","# print(\"validation score : \",f1_score(y_val,ypredict,average='macro'))\n","# svm_val=f1_score(y_val,ypredict,average='macro')\n","# #Displaying the confusion matrix\n","\n","# cm=confusion_matrix(y_val,ypredict)\n","# cdisplay = ConfusionMatrixDisplay(cm)\n","# cdisplay.plot()"],"metadata":{"trusted":true,"id":"9jW4mPBp5mW1"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### 2.3 Feature selection using SelectKbest"],"metadata":{"id":"7RYH8PqY5mW1"}},{"cell_type":"code","source":["# # Checking for which value of k, the model is performing well.\n","# K = range(20, 45)\n","\n","#  for i in K :\n","#   skb = SelectKBest(mutual_info_classif, k = i)\n","#   train_tf_kbest = skb.fit_transform(train_tf, y_train)\n","#   val_tf_kbest =skb.transform(val_tf)\n","#   svm=SVC(kernel='rbf',random_state=42,class_weight={0:.8,1:2},gamma=.05,C=1)\n","#   svm.fit(train_tf_kbest, y_train)\n","#   ypredict = svm.predict(val_tf_kbest)\n","#   ypred_train = svm.predict(train_tf_kbest)\n","#   print('k=',i,\"Train Score : \",f1_score(y_train,ypred_train,average='macro'),\"Validation Score : \",f1_score(y_val,ypredict,average='macro'))"],"metadata":{"trusted":true,"id":"krL-rWcj5mW1"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# #for k=31, the model has given a good score.\n","# np.random.seed(42)\n","# select_k=SelectKBest(mutual_info_classif,k=31)\n","# train_tf_selected=select_k.fit_transform(train_tf,y_train)\n","# val_tf_selected = select_k.transform(val_tf)\n","# X_test_tf_selected=select_k.transform(X_test_tf)\n","\n","# svm=SVC(kernel='rbf',random_state=42,class_weight={0:.8,1:2},gamma=.05,C=1)\n","# svm.fit(train_tf_selected,y_train)\n","# ypredict = svm.predict(val_tf_selected)\n","# ypred_train = svm.predict(train_tf_selected)\n","\n","# print(\"Training Score   :\",f1_score(y_train,ypred_train,average='macro'))\n","# print(\"Validation score :\",f1_score(y_val,ypredict,average='macro'))"],"metadata":{"trusted":true,"id":"LpkCLhVe5mW1"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# cm=confusion_matrix(y_val,ypredict)\n","# cdisplay=ConfusionMatrixDisplay(cm)\n","# cdisplay.plot()"],"metadata":{"trusted":true,"id":"1wVTGnQP5mW2"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["### **Insights of SVM**\n","\n"," ***Default Values :***\n","\n"," Train Score is **0.8112** and validation score is **0.7675**. The model is **overfitting**\n","\n"," ***Tuning and training with best parameters :***\n","\n","The training score (**0.7600**)  reduced and the validation score (**0.7661)** is more or less the same as the default model.The model is slightly **underfitting.**\n","\n","***Reducing the C value from 0.1 to 1***:\n","\n","The training score **(0.7870)** and validation score **(0.7714)** improved significantly with the **public score of 0.76075**.\n","\n","***Feature selection using SelectKBest***\n","\n","The model trained with **31** features slightly reduced the score with the training score of **0.7745** and validation score of **0.7676**"],"metadata":{"id":"scYWpG6a5mW2"}},{"cell_type":"markdown","source":["# Model 3 : Decision Tree model"],"metadata":{"id":"FmIE8pgP5mW2"}},{"cell_type":"markdown","source":["#### 3.1 Training the model with default parameters"],"metadata":{"id":"2fanlj0m5mW2"}},{"cell_type":"code","source":["# dtc=DecisionTreeClassifier(class_weight = {0:.8,1:2},random_state=42)\n","# dtc.fit(train_tf,y_train)"],"metadata":{"trusted":true,"id":"5gN2Au1Q5mW2"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# # Predicting the score\n","# ypred_train=dtc.predict(train_tf)\n","# ypredict=dtc.predict(val_tf)\n","\n","# # Printing the score\n","\n","# print(\"Training score   : \" ,f1_score(y_train,ypred_train,average='macro'))\n","# print(\"validation score : \",f1_score(y_val,ypredict,average='macro'))\n","# #print(classification_report(y_val,ypredict))\n","\n","# #The model is overfitting"],"metadata":{"trusted":true,"id":"WgoEZw_Z5mW2"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### 3.2 **Hyper parameter tuning of the Decision Tree**"],"metadata":{"id":"KHF3ItH75mW2"}},{"cell_type":"code","source":["# param_dist = {\n","#     'criterion': ['gini', 'entropy'],\n","#     'splitter' : ['best','random'],\n","#     'min_samples_leaf': [2,4,6,8,10],\n","#     'max_depth': [None, 10, 20, 30, 40, 50],\n","#     'min_samples_split': np.arange(2, 10),\n","#     'max_features': ['auto', 'sqrt', 'log2', None],\n","#     'class_weight': ['balanced', {0: .8, 1: 2},{0: 1, 1: 5}, {0:1,1:15}]\n","\n","# dtc1=DecisionTreeClassifier(random_state=42)\n","# ran_search = RandomizedSearchCV(dtc1, param_distributions=param_dist,\n","#                                    n_iter=50, scoring='f1', cv=5,\n","#                                    random_state=42, n_jobs=-1, verbose=1)\n","# ran_search.fit(train_tf, y_train)\n","#ran_search.best_params_"],"metadata":{"trusted":true,"id":"lcRFfWBj5mW3"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["***The best parameters given by the hyper parameter tuning are :***\n","\n","{'splitter' : 'best', 'min_samples_split':4,min_samples_leaf':3,'max_depth' :10,'criterion' : 'gini', 'class_weight' : {0:.8,1:2}}1: 5}}"],"metadata":{"id":"R5JjAHOh5mW3"}},{"cell_type":"code","source":["# Training the model using best parameters\n","dtc_best=DecisionTreeClassifier(max_depth=10,criterion='gini',splitter='best',min_samples_split = 4,max_features = None,\n","                                min_samples_leaf= 3,class_weight={0: 0.8, 1: 2},random_state=42)\n","dtc_best.fit(train_tf,y_train)"],"metadata":{"trusted":true,"id":"93tILNcS5mW3"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["#Predicting ths score\n","ypred_train=dtc_best.predict(train_tf)\n","ypredict=dtc_best.predict(val_tf)\n","\n","# Printing the score\n","\n","print(\"Training score   : \" ,f1_score(y_train,ypred_train,average='macro'))\n","print(\"validation score : \",f1_score(y_val,ypredict,average='macro'))\n","dtc_val=f1_score(y_val,ypredict,average='macro')"],"metadata":{"trusted":true,"id":"dqt5fKPU5mW3"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["cm=confusion_matrix(y_val,ypredict)\n","cdisplay=ConfusionMatrixDisplay(confusion_matrix=cm)\n","cdisplay.plot()"],"metadata":{"trusted":true,"id":"z20DQajQ5mW3"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["### Insights of Decision Tree Classifier\n","\n","\n","* The model is **overfitting** for **default values** with training score of **1.0** and validation score of **0.69**\n","  \n","* The **hyper parameter tuning** improved the model's performance significantly with the         training score of  **0.8000** and the Validation score is **0.7580**\n","\n"],"metadata":{"id":"lAEXQIbY5mW3"}},{"cell_type":"markdown","source":["# Model 4 : Random Forest classifier"],"metadata":{"id":"JJzCd1m15mW4"}},{"cell_type":"markdown","source":["#### **4.1. Training Random forest classifier with default values**"],"metadata":{"id":"g4OrZdWj5mW4"}},{"cell_type":"code","source":["# rfc=RandomForestClassifier(class_weight={0:.8,1:2},random_state=42)\n","# rfc.fit(train_tf,y_train)"],"metadata":{"trusted":true,"id":"xVD_QmZG5mW4"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# ypred_train=rfc.predict(train_tf)\n","# ypredict=rfc.predict(val_tf)\n","\n","# # Printing the score\n","\n","# print(\"Training score   : \" ,f1_score(y_train,ypred_train,average='macro'))\n","# print(\"validation score : \",f1_score(y_val,ypredict,average='macro'))"],"metadata":{"trusted":true,"id":"ZxCCI3Um5mW4"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### 4.2 **Hyper parameter tuning**"],"metadata":{"id":"32MNZWPd5mW4"}},{"cell_type":"code","source":["# param_grid = {\n","#     'n_estimators': [100,200,400,300],\n","#     'max_depth': [20,30,35,40],\n","#     'min_samples_split' : [15,20,30],\n","#     'min_samples_leaf' : [5,7,9,10],\n","#     'max_features' : ['sqrt','log2',np.arange(10,20,5)]}\n","\n","\n","\n","# rf_gs = RandomizedSearchCV(RandomForestClassifier(random_state=42,class_weight={0:.8,1:2}),\n","#                            param_distributions = param_grid,\n","#                            random_state=42,\n","#                            n_iter=10,\n","#                            cv=5,\n","#                            verbose=2,\n","#                            n_jobs=-1,scoring='f1'\n","#                            )\n","# rf_gs.fit(train_tf,y_train)\n","\n","# rf_gs.best_params_"],"metadata":{"trusted":true,"id":"NAwSIZ1R5mW4"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# pred_train=rf_gs.predict(train_tf)\n","# ypredict=rf_gs.predict(val_tf)\n","\n","# # Printing the score\n","\n","# print(\"Training score   : \" ,f1_score(y_train,ypred_train,average='macro'))\n","# print(\"validation score : \",f1_score(y_val,ypredict,average='macro'))"],"metadata":{"trusted":true,"id":"tpFlLHOg5mW4"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# cm=confusion_matrix(y_val,ypredict)\n","# cdisplay = ConfusionMatrixDisplay(confusion_matrix=cm)\n","# cdisplay.plot()"],"metadata":{"trusted":true,"id":"b-yaZPDx5mW4"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### 4.3 ***Retuned the parameter randomly to improve model's performance***"],"metadata":{"id":"VON-pPva5mW5"}},{"cell_type":"code","source":["# rfc = RandomForestClassifier(n_estimators= 400,min_samples_split= 30,criterion='entropy',\n","#                           max_features=15,min_samples_leaf= 8,class_weight={0:.8,1:2},\n","#                              random_state=42)\n","rfc = RandomForestClassifier(n_estimators= 900,min_samples_split=30,criterion='entropy',\n","                          max_features=15,min_samples_leaf= 7,class_weight={0:.8,1:2},\n","                             random_state=42)\n","rfc.fit(train_tf,y_train)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T19:13:51.956168Z","iopub.execute_input":"2024-11-30T19:13:51.956597Z","iopub.status.idle":"2024-11-30T19:14:35.625036Z","shell.execute_reply.started":"2024-11-30T19:13:51.956561Z","shell.execute_reply":"2024-11-30T19:14:35.624068Z"},"id":"_EwBbLR35mW5"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["ypred_train=rfc.predict(train_tf)\n","ypredict=rfc.predict(val_tf)\n","\n","# Printing the score\n","\n","print(\"Training score   : \" ,f1_score(y_train,ypred_train,average='macro'))\n","print(\"validation score : \",f1_score(y_val,ypredict,average='macro'))\n","rf_val=f1_score(y_val,ypredict,average='macro')\n","print(classification_report(y_val,ypredict))"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T19:15:13.900916Z","iopub.execute_input":"2024-11-30T19:15:13.901285Z","iopub.status.idle":"2024-11-30T19:15:19.025942Z","shell.execute_reply.started":"2024-11-30T19:15:13.901251Z","shell.execute_reply":"2024-11-30T19:15:19.024931Z"},"id":"vGmBdX5e5mW5"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["cm=confusion_matrix(y_val,ypredict)\n","cdisplay = ConfusionMatrixDisplay(confusion_matrix=cm)\n","cdisplay.plot()"],"metadata":{"trusted":true,"id":"XFB9_x8w5mW5"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# rfc1=RandomForestClassifier(random_state=42,class_weight={0:.8,1:2})\n","# rfe_rfc=RFE(rfc1,n_features_to_select=15)\n","# rfe_rfc.fit(train_tf,y_train)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-29T19:28:26.611585Z","iopub.execute_input":"2024-11-29T19:28:26.611977Z","iopub.status.idle":"2024-11-29T19:30:33.234982Z","shell.execute_reply.started":"2024-11-29T19:28:26.611941Z","shell.execute_reply":"2024-11-29T19:30:33.23357Z"},"id":"cTNBlDqK5mW5"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# ypred_train=rfe_rfc.predict(train_tf)\n","# ypredict=rfe_rfc.predict(val_tf)\n","\n","# # Printing the score\n","\n","# print(\"Training score   : \" ,f1_score(y_train,ypred_train,average='macro'))\n","# print(\"validation score : \",f1_score(y_val,ypredict,average='macro'))\n","# rf_val=f1_score(y_val,ypredict,average='macro')\n","# print(classification_report(y_val,ypredict))"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-29T19:30:49.29818Z","iopub.execute_input":"2024-11-29T19:30:49.298594Z","iopub.status.idle":"2024-11-29T19:30:50.075596Z","shell.execute_reply.started":"2024-11-29T19:30:49.29856Z","shell.execute_reply":"2024-11-29T19:30:50.074281Z"},"id":"NRn-8OQA5mW5"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["### Insights of RandomForest Classifier\n","\n","\n","* The model is **overfitting** for **default values** with training score of **1.0** and validation score of **0.69**\n","  \n","* The **hyper parameter tuning** of the model improved the validation score and no overfitting. The model performs well on unseen data. Training score of  **0.7499** and the Validation score is **0.7753**\n","\n","* Retuned the model with more estimators to improve the training score and. This achieved a **public score of 0.77400** The training score improved to  **0.8221** and the validation score improved to **0.7793**"],"metadata":{"id":"_Wctj3nD5mW5"}},{"cell_type":"markdown","source":["# Model 5 : Voting Classifier"],"metadata":{"id":"pQflg8OK5mW5"}},{"cell_type":"markdown","source":["#### **5.1. Training Voting Classifier with default values**"],"metadata":{"id":"ak_vhR5H5mW6"}},{"cell_type":"code","source":["# clf1 = DecisionTreeClassifier(random_state=42,class_weight={0: .8, 1: 2})\n","# clf2 = RandomForestClassifier(class_weight={0:.8,1:2},random_state=42)\n","# clf3= AdaBoostClassifier(random_state=42)\n","# vt_clf=VotingClassifier(estimators=[('dt',clf1),('rf',clf2),('adb',clf3)])\n","# vt_clf.fit(train_tf,y_train)"],"metadata":{"trusted":true,"id":"MEEgULYX5mW6"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# ypred_train=vt_clf.predict(train_tf)\n","# ypredict=vt_clf.predict(val_tf)\n","\n","# # Printing the score\n","\n","# print(\"Training score   : \" ,f1_score(y_train,ypred_train,average='macro'))\n","# print(\"validation score : \",f1_score(y_val,ypredict,average='macro'))\n","# #print(classification_report(y_val,ypredict))"],"metadata":{"trusted":true,"id":"CrSVC0Jj5mW6"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["#### **5.2. Training Voting Classifier with the 3 best performing models**"],"metadata":{"id":"tgZVhA4s5mW6"}},{"cell_type":"code","source":["clf1 = DecisionTreeClassifier(max_depth=10,criterion='gini',splitter='best',\n","                              min_samples_split = 15,max_features = None,\n","                              min_samples_leaf= 9,class_weight={0: .8, 1: 2},\n","                              random_state=42)\n","\n","# clf2 = RandomForestClassifier(n_estimators= 400,min_samples_split= 30,criterion='entropy',\n","#                               max_features=15,min_samples_leaf= 8,class_weight={0:.8,1:2},\n","#                               random_state=42)\n","clf2= RandomForestClassifier(n_estimators= 1000,min_samples_split=25,criterion='entropy',\n","                          max_features=15,min_samples_leaf= 8,class_weight={0:.8,1:2},\n","                             random_state=42)\n","clf3=  AdaBoostClassifier(estimator=DecisionTreeClassifier(max_depth=7,min_samples_leaf=12,\n","                                                           min_samples_split=50,\n","                                                           max_features=15,\n","                                                           class_weight={0:.8,1:2},\n","                                                           random_state=42),\n","                         n_estimators=600,learning_rate=.008,random_state=42)\n","clf4=SVC(kernel='rbf',random_state=42,class_weight={0:.8,1:2},C=1,gamma=.05)\n","pos=np.where(y_train==1)[0]\n","neg=np.where(y_train==0)[0]\n","\n","clf5 =  XGBClassifier(n_estimators=700,scale_pos_weight=len(neg)/len(pos),subsample=.8,max_depth=7,learning_rate=0.02,\n","                   reg_lambda=.05,reg_alpha=0.01,gamma=1.5,min_child_weight=5,colsample_bytree=0.8,random_state=42)\n","\n","#vt_clf=VotingClassifier(estimators=[('dt',clf1),('rf',clf2),('adb',clf3)],voting='hard',weights=[1,2,1])\n","vt_clf=VotingClassifier(estimators=[('dt',clf1),('rf',clf2),('adb',clf3),('svm',clf4),('xgb',clf5)],voting='hard',weights=[1,2,2,1,2])\n","#vt_clf=VotingClassifier(estimators=[('dt',clf1),('rf',clf2),('xgb',clf5),('svm',clf4)],voting='hard',weights=[1,2,2,2])\n","#vt_clf=VotingClassifier(estimators=[('dt',clf1),('rf',clf2),('adb',clf3),('svm',clf4)],voting='soft')\n","vt_clf.fit(train_tf,y_train)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T18:26:59.183126Z","iopub.execute_input":"2024-11-30T18:26:59.183469Z","iopub.status.idle":"2024-11-30T18:28:47.989252Z","shell.execute_reply.started":"2024-11-30T18:26:59.18344Z","shell.execute_reply":"2024-11-30T18:28:47.988187Z"},"id":"LT-YKGUe5mW6"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["ypred_train=vt_clf.predict(train_tf)\n","ypredict=vt_clf.predict(val_tf)\n","\n","# Printing the score\n","\n","print(\"Training score   : \" ,f1_score(y_train,ypred_train,average='macro'))\n","print(\"validation score : \",f1_score(y_val,ypredict,average='macro'))\n","vot_val=f1_score(y_val,ypredict,average='macro')\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-30T18:32:28.089101Z","iopub.execute_input":"2024-11-30T18:32:28.089491Z","iopub.status.idle":"2024-11-30T18:33:02.111192Z","shell.execute_reply.started":"2024-11-30T18:32:28.089452Z","shell.execute_reply":"2024-11-30T18:33:02.110117Z"},"id":"hLNYzSdX5mW6"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["print(classification_report(y_val,ypredict))"],"metadata":{"trusted":true,"id":"cBA_S8vu5mW6"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["cm=confusion_matrix(y_val,ypredict)\n","cdisplay = ConfusionMatrixDisplay(confusion_matrix=cm)\n","cdisplay.plot()"],"metadata":{"trusted":true,"id":"ZRGT304p5mW6"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["### Insights from Voting Classifier\n","\n","- The model is overfitting with default values with train score of 1.0 and validation score of 0.7021.\n","  \n","- The model was again trained with **3 best performing models** (DTC,RFC and Adaboost) as **estimators**. It improved the score significantly with **training score of 0.8235** and **validation score of 0.7787** and reduced overfitting to a greater extent.\n","\n","- **Hard** voting slightly gave a better score than **soft** voting\n","  \n","- This model gave the **highest public score of 0.77493** in kaggle\n",""],"metadata":{"id":"-H6vquKC5mW7"}},{"cell_type":"markdown","source":["# Model 6 : XGBOOST classifier\n"],"metadata":{"id":"hct3IRnf5mW7"}},{"cell_type":"code","source":["# pos=np.where(y_train==1)[0]\n","# neg=np.where(y_train==0)[0]\n","# ratio=len(neg)/len(pos)\n","# print(ratio)\n","# xgb_clf =  XGBClassifier(n_estimators=1000,scale_pos_weight=(len(neg)/len(pos)),subsample=.8,max_depth=7,learning_rate=0.02,\n","#                    reg_lambda=1,reg_alpha=0.2,gamma=1.2,min_child_weight=3,colsample_bytree=0.8,random_state=42)\n","# xgb_clf.fit(train_tf,y_train)\n"],"metadata":{"trusted":true,"id":"VTxeL_4X5mW7"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# ypred_train=xgb_clf.predict(train_tf)\n","# ypredict=xgb_clf.predict(val_tf)\n","\n","# # Printing the score\n","\n","# print(\"Training score   : \" ,f1_score(y_train,ypred_train,average='macro'))\n","# print(\"validation score : \",f1_score(y_val,ypredict,average='macro'))\n","# xgb_val=f1_score(y_val,ypredict,average='macro')\n","print(classification_report(y_val,ypredict))"],"metadata":{"trusted":true,"id":"XYQYuyAZ5mW7"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["# Model 7 : AdaBoost Classifier"],"metadata":{"id":"hU9u_le75mW7"}},{"cell_type":"code","source":["# adb_clf=  AdaBoostClassifier(estimator=DecisionTreeClassifier(max_depth=7,min_samples_leaf=12,\n","#                                                            min_samples_split=50,\n","#                                                            max_features=15,\n","#                                                            class_weight={0:.8,1:2},\n","#                                                            random_state=42),\n","#                          n_estimators=600,learning_rate=.008,random_state=42)\n","# adb_clf.fit(train_tf,y_train)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T15:24:04.75206Z","iopub.execute_input":"2024-11-28T15:24:04.752495Z","iopub.status.idle":"2024-11-28T15:24:41.637598Z","shell.execute_reply.started":"2024-11-28T15:24:04.752458Z","shell.execute_reply":"2024-11-28T15:24:41.63624Z"},"id":"HMBffQD-5mW7"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# ypred_train=adb_clf.predict(train_tf)\n","# ypredict=adb_clf.predict(val_tf)\n","\n","# # Printing the score\n","\n","# print(\"Training score   : \" ,f1_score(y_train,ypred_train,average='macro'))\n","# print(\"validation score : \",f1_score(y_val,ypredict,average='macro'))\n","# adb_val=f1_score(y_val,ypredict,average='macro')\n","# print(classification_report(y_val,ypredict))"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T15:24:47.147208Z","iopub.execute_input":"2024-11-28T15:24:47.147604Z","iopub.status.idle":"2024-11-28T15:24:52.528779Z","shell.execute_reply.started":"2024-11-28T15:24:47.147571Z","shell.execute_reply":"2024-11-28T15:24:52.527507Z"},"id":"jjDFw6zh5mW7"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["# Model 8 : LightGBM classifier"],"metadata":{"id":"r7Vw904l5mW7"}},{"cell_type":"code","source":["# cl_wt= {0:.8, 1:2}\n","# lgbm_hyper = LGBMClassifier(n_estimators=800,class_weight=cl_wt,\n","\n","#     learning_rate=0.03,\n","#     max_depth=10,\n","#     min_child_samples=6,\n","#     num_leaves=25,\n","#     colsample_bytree=0.8,subsample=0.6,reg_lambda=0.1,reg_alpha=0.3,\n","#     random_state=42,\n","#     )\n","# lgbm_hyper.fit(train_tf,y_train)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T15:12:43.69634Z","iopub.execute_input":"2024-11-28T15:12:43.697143Z","iopub.status.idle":"2024-11-28T15:12:48.76777Z","shell.execute_reply.started":"2024-11-28T15:12:43.697106Z","shell.execute_reply":"2024-11-28T15:12:48.766668Z"},"id":"PrcVTPza5mW8"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# ypred_train =lgbm_hyper.predict(train_tf)\n","# #ypred_train=vt_clf.predict(train_tf_selected)\n","# #ypredict=vt_clf.predict(val_tf_selected)\n","# ypredict=lgbm_hyper.predict(val_tf)\n","# print(\"Training score : \",f1_score(y_train,ypred_train,average='macro'))\n","# print(\"Validation score :\",f1_score(y_val,ypredict,average='macro'))\n","# print(classification_report(y_val,ypredict))"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-28T15:12:50.27291Z","iopub.execute_input":"2024-11-28T15:12:50.273362Z","iopub.status.idle":"2024-11-28T15:12:52.352944Z","shell.execute_reply.started":"2024-11-28T15:12:50.273324Z","shell.execute_reply":"2024-11-28T15:12:52.35169Z"},"id":"B56eWXT45mW8"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["# Summary of performances of the 5 models trained"],"metadata":{"id":"VaAtGu8C5mW8"}},{"cell_type":"code","source":["# X=['SGD','SVM','DTC','RFC','Voting Classifier']\n","# Y=[sgd_val,svm_val,dtc_val,rf_val,vot_val]\n","\n","\n","# # Create a bar chart\n","# bars = plt.bar(X, Y, color='green',width=0.5)\n","\n","# # Add labels and title\n","# plt.xlabel('Models')\n","# plt.ylabel('F1 validation score')\n","# plt.title('Bar Chart')\n","# plt.xticks()\n","# plt.yticks()\n","# for bar in bars:\n","#     yval = bar.get_height()  # Get the height of the bar\n","#     plt.text(bar.get_x() + bar.get_width() / 2, yval, f'{round(yval, 4)}',\n","#              ha='center', va='bottom')  # Position text at the top of each bar\n","\n","# # Display the plot\n","# plt.show()\n"],"metadata":{"trusted":true,"id":"DSf-_bBe5mW8"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["### To Summarise,\n","\n","##### - The **Voting Classifier** and the **RandomForest Classifier** are the best\n","\n","#####   performing models out of the 5 models trained."],"metadata":{"id":"EWofDdvJ5mW8"}},{"cell_type":"markdown","source":["# Predicting the test data before submission"],"metadata":{"id":"Ce8GFEe-5mW8"}},{"cell_type":"code","source":["# ypred=sgd_new.predict(X_test_tf)\n","#ypred=svm.predict(X_test_tf)\n","# ypred=dtc_best.predict(X_test_tf)\n","ypred=rfc.predict(X_test_tf)\n","#ypred=rf_clf.predict(X_test_tf)\n","#ypred=vt_clf.predict(X_test_tf)\n","#ypred=lgbm_hyper.predict(X_test_tf)\n","#ypred=adb_clf.predict(X_test_tf)"],"metadata":{"execution":{"iopub.status.busy":"2024-11-30T19:15:55.564786Z","iopub.execute_input":"2024-11-30T19:15:55.565145Z","iopub.status.idle":"2024-11-30T19:15:56.827928Z","shell.execute_reply.started":"2024-11-30T19:15:55.565115Z","shell.execute_reply":"2024-11-30T19:15:56.826982Z"},"trusted":true,"id":"sB5HnDRH5mW8"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["## Submission"],"metadata":{"id":"xgJLcet35mW9"}},{"cell_type":"code","source":[" submission = pd.DataFrame({\"id\": range(0,X_test.shape[0]),\n","                           \"target\": ypred})\n"," submission['target']=submission['target'].replace({1:'yes',0:'no'})\n"," submission.to_csv('/kaggle/working/submission.csv',index=False)\n","\n","# #     saved_file = pd.read_csv('submission.csv')\n","# #     print(saved_file.head())  # Print the first few rows to verify\n","#  print(\"successful\")\n","#  import os\n","#  print(os.getcwd())\n","#  print(os.listdir('.'))\n","\n","#     # List files in the kaggle/competition folder\n","#  print(os.listdir('/kaggle/working'))"],"metadata":{"execution":{"iopub.status.busy":"2024-11-30T19:16:02.38518Z","iopub.execute_input":"2024-11-30T19:16:02.385842Z","iopub.status.idle":"2024-11-30T19:16:02.402888Z","shell.execute_reply.started":"2024-11-30T19:16:02.385804Z","shell.execute_reply":"2024-11-30T19:16:02.40191Z"},"trusted":true,"id":"hbu-Xi7X5mW9"},"outputs":[],"execution_count":null}]}